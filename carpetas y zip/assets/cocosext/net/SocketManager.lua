cc.WebSocketProtocolType = 
{
	Original = 1,
	SocketIO = 2,
	LcNetProto = 3,
}

local SocketIOFacade = class("SocketIOFacade")
function SocketIOFacade:ctor(objSocketManager)
	
	self.objSocketIO = require("cocos.netproxy.socketio").new()
	self.objWebSocket = nil
	self.objSocketManager = objSocketManager
end

function SocketIOFacade:init(objWebSocket)


	local _onSocketIOMsg = function(szEvent,tData)
		self:onSocketIOMessage(szEvent,tData)
	end
	self.objWebSocket = objWebSocket
	
	self.objSocketIO:registerToWebSocket(self.objWebSocket)	
	self.objSocketIO:registerFun(SocketIOCallbackType._open_Type,function(strBuff,ioffset)
		self:onSocketIOFrameOpen(strBuff,ioffset)
	end)

	self.objSocketIO:registerFun(SocketIOCallbackType._msg_Type,_onSocketIOMsg,true) 
	self.objSocketIO:registerFun(SocketIOCallbackType._binary_Msg_Type,_onSocketIOMsg,true)

end

function SocketIOFacade:onSocketIOMessage(szEvent,tData)
	
	if self.objSocketManager.isSn then
		SendMessage(MsgID_AI_Net_Recived, szEvent,tData)
	else
		SendMessage(MsgID_Player_Net_Recived, szEvent,tData)
	end

end

function SocketIOFacade:onSocketIOFrameOpen(strBuff,ioffset)
	SendMessage(MsgID_Ping, strBuff,ioffset)
end

function SocketIOFacade:sendTextData(protocal, data)	
	self.objSocketIO:sendTextData(protocal, data)
end

function SocketIOFacade:sendOneBinaryData(protocal, data)
	self.objSocketIO:sendOneBinaryData(protocal, data)
end
function SocketIOFacade:setPBMapping(mapping) 
	self.objSocketIO.__pbNameMapping = mapping
end

local LcNetProtoFacade = class("LcNetProtoFacade")
function LcNetProtoFacade:ctor(objSocketManager)
	self.objLcNetProto = require("cocosext.net.LcNetProto").new()
	self.objWebSocket = nil
	self.objSocketManager = objSocketManager
end

function LcNetProtoFacade:init(objWebSocket)

	local _ontProtoMsg = function(szEvent,tData)
		self:onNetMessage(szEvent,tData)
	end
	self.objWebSocket = objWebSocket
	
	self.objLcNetProto:registerToWebSocket(self.objWebSocket)	
	self.objLcNetProto:registerFun(LcNetProtoCallbackType._open_Type,function()
		self:onNetFrameOpen()
	end)

	self.objLcNetProto:registerFun(LcNetProtoCallbackType._binary_Msg_Type,_ontProtoMsg)

end

function LcNetProtoFacade:onNetMessage(szEvent,tData)
	
	if self.objSocketManager.isSn then
		SendMessage(MsgID_AI_Net_Recived, szEvent,tData)
	else
		SendMessage(MsgID_Player_Net_Recived, szEvent,tData)
	end

end

function LcNetProtoFacade:onNetFrameOpen()
	SendMessage(MsgID_Ping)
end

function LcNetProtoFacade:sendTextData(protocal, data)	
	
end

function LcNetProtoFacade:sendOneBinaryData(protocal, data)
	self.objLcNetProto:sendOneBinaryData(protocal, data)
end

function LcNetProtoFacade:setPBMapping(mapping) 
	self.objLcNetProto:SetProtoNameMapping(mapping)
end

local _M = class("SocketManager")

--[[
	 webSocket ÁÆ°ÁêÜÁ±ª
--]]

function _M:ctor(isSn,iType)
	isSn = isSn or false
	print('SocketManager:ctor:'..tostring(isSn))
	
	--url="ws://183.3.211.167:9008/feizhouqi_yn/?sign=c7961cc7357f8a991edf5a93daf1e69b2d7c30ab&post_data=%7B%22roomid%22%3A%22123457727%22%2C%22channelid%22%3A%22guangzhou1%22%2C%22gameid%22%3A%22ninedead%22%2C%22player%22%3A%7B%22uid%22%3A%221234789%22%2C%22name%22%3A%22test2%22%2C%22avatarurl%22%3A%22http%3A%2F%2Fs1.yy.com%2Fguild%2Fheader%2F10001.jpg%22%2C%22opt%22%3A%22%22%7D%7D&EIO=3&transport=websocket&nonstrjg4g3b0i-7pb0-92y5-mu0a-e997nmb6gg3p=&timestamp=1509710152"

	self.url = url
	self.msgID = MsgID_Player
	if isSn then
		self.msgID = MsgID_AI
	end
	self.isSn = isSn

	if iType == nil then
		iType = cc.WebSocketProtocolType.SocketIO
	end

	if iType == cc.WebSocketProtocolType.SocketIO then
		self.msgProtocol = SocketIOFacade.new(self)
	elseif iType == cc.WebSocketProtocolType.LcNetProto then
		self.msgProtocol = LcNetProtoFacade.new(self)
	else
		self.msgProtocol = nil
	end

	-- self:connectSocket(url)
end

function _M:setPBMapping(mapping)
	--self.socketIO.__pbNameMapping = mapping
	if self.msgProtocol ~= nil then
		self.msgProtocol:setPBMapping(mapping)
	end
end


function _M:connectSocket(url)
	
	--[[
	local _onWebSocketMsg = function(szEvent,tData)
		self:onSocketIOMessage(szEvent,tData)
	end
	]]--
	print(self.msgID..':connectSocket = ', os.date())
	   
	
	self.webSocket = cc.WebSocket:create(url)
	
	
	self.webSocket:registerScriptHandler(handler(self, self.onWebsocketOpen), cc.WEBSOCKET_OPEN)
	--self.webSocket:registerScriptHandler(handler(self, self.onWebsocketMessage), cc.WEBSOCKET_MESSAGE)
	self.webSocket:registerScriptHandler(handler(self, self.onWebsocketClose), cc.WEBSOCKET_CLOSE)
	self.webSocket:registerScriptHandler(handler(self, self.onWebsocketError), cc.WEBSOCKET_ERROR)

	if self.msgProtocol ~= nil then
		self.msgProtocol:init(self.webSocket)
	else
		self.webSocket:registerScriptHandler(handler(self, self.onWebsocketMessage), cc.WEBSOCKET_MESSAGE)
	end

	--[[	
	self.socketIO:registerToWebSocket(self.webSocket)
	
	self.socketIO:registerFun(SocketIOCallbackType._open_Type,function(strBuff,ioffset)
		self:onSocketIOFrameOpen(strBuff,ioffset)
	end) 

	self.socketIO:registerFun(SocketIOCallbackType._msg_Type,_onWebSocketMsg,true) 
	self.socketIO:registerFun(SocketIOCallbackType._binary_Msg_Type,_onWebSocketMsg,true)
	
	-- self.socketIO.__pbNameMapping = PBMapping

	
	]]--
	
	
end

function _M:onWebsocketOpen(data)
	print(self.msgID..':onWebsocketOpen:'..data)
	if self.isSn then
		SendMessage(MsgID_AI_Net_Connected, data)
	else
		SendMessage(MsgID_Player_Net_Connected, data)
	end
end



function _M:onWebsocketMessage(data)
 	-- print(self.msgID..':onWebsocketMessage = '.. data)

 	if not USE_PROTOBUF then
 		if self.isSn then
 			SendMessage(MsgID_AI_Net_Recived, data)
 		else
 			SendMessage(MsgID_Player_Net_Recived, data)
 		end
 	else
 		-- TODO:: pb data handler
 	end
 end

function _M:onWebsocketClose(data)
	print(self.msgID..':onWebsocketClose:' .. data)
	if self.isSn then
		SendMessage(MsgID_AI_Net_Closed, data)
	else
		SendMessage(MsgID_Player_Net_Closed, data)
	end
end

function _M:onWebsocketError(data)
	print(self.msgID..':onWebsocketError:' .. data)
	if self.isSn then
		SendMessage(MsgID_AI_Net_Error, data)
	else
		SendMessage(MsgID_Player_Net_Error, data)
	end
end

--[[
	ÂèëÈÄÅÂçèËÆÆ
	@param sendStr Ë¶ÅÂèëÈÄÅÁöÑÂ≠óÁ¨¶‰∏≤
--]]
function _M:sendData(sendStr)
	if self:isSocketOpen() then
		-- print(self.msgID..':sendData = '.. sendStr)
		self.webSocket:sendString(sendStr)
	else
		if self.webSocket then
			print(self.msgID..':error webSocket state = ', self.webSocket:getReadyState())
		else
			print(self.msgID..':error webSocket is nil')
		end
	end
end

--[[
	ÂèëÈÄÅJsonÊï∞ÊçÆ
	@param protocal ÊèèËø∞Êñá‰ª∂
	@param data 
--]]
function _M:sendTextData(protocal, data)
	if self.msgProtocol and self:isSocketOpen() then
		-- print(self.msgID..':sendTextData = '.. protocal..' data = ', data)
		self.msgProtocol:sendTextData(protocal, data)
		--self.socketIO:sendTextData(protocal, data)
	end
end


--[[
	ÂèëÈÄÅPBÊï∞ÊçÆ
	@param protocal ÊèèËø∞Êñá‰ª∂
	@param data table 
--]]
function _M:sendOneBinaryData(protocal, data)
	if self.msgProtocol and self:isSocketOpen() then
		-- dump(data, string.format("%s:sendOneBinaryData:%s", self.msgID, protocal))
		self.msgProtocol:sendOneBinaryData(protocal, data)
		--self.socketIO:sendOneBinaryData(protocal, data)
	end
end

--[[
	ÂÖ≥Èó≠websocket
--]]
function _M:closeSocket()
	print(self.msgID..':close Socket by myself')
	if self.webSocket and self.webSocket:getReadyState() == cc.WEBSOCKET_STATE_OPEN then
		self.webSocket:close()
	end
end

--[[
	socketÊ?ØÂê¶‰∏∫ÈìæÊé•Áä∂ÊÄÅ
]]
function _M:isSocketOpen()
	if self.webSocket and self.webSocket:getReadyState() == cc.WEBSOCKET_STATE_OPEN then
		return true
	end
	return false
end

return _M
