
local _M = class("ViewBase", cc.Node)

function _M:ctor(app, name)
    self:enableNodeEvents()
    self.app_ = app
    self.name_ = name

    -- check CSB resource file
    local res = rawget(self.class, "RESOURCE_FILENAME")
    if res then
        self:createResourceNode(res)
    end

    local binding = rawget(self.class, "RESOURCE_BINDING")
    if res and binding then
        self:createResourceBinding(binding)
    end

    if self.onCreate then self:onCreate() end
end

function _M:getApp()
    return self.app_
end

function _M:getName()
    return self.name_
end

function _M:getResourceNode()
    return self.resourceNode_
end

function _M:createResourceNode(resourceFilename)
    if self.resourceNode_ then
        self.resourceNode_:removeSelf()
        self.resourceNode_ = nil
    end
    self.resourceNode_ = cc.CSLoader:createNode(resourceFilename)
    assert(self.resourceNode_, string.format("ViewBase:createResourceNode() - load resouce node from file \"%s\" failed", resourceFilename))
    self:addChild(self.resourceNode_)
    local size = cc.Director:getInstance():getVisibleSize()
    self.resourceNode_:setAnchorPoint(0.5, 0.5)
    self.resourceNode_:setPosition(size.width/2, size.height/2)
    ccui.Helper:doLayout(self.resourceNode_)
end

function _M:createResourceBinding(binding)
    assert(self.resourceNode_, "ViewBase:createResourceBinding() - not load resource node")
    for nodeName, nodeBinding in pairs(binding) do
        local node = self.resourceNode_:getChildByName(nodeName)
        if nodeBinding.varname then
            self[nodeBinding.varname] = node
        end
        for _, event in ipairs(nodeBinding.events or {}) do
            if event.event == "touch" then
                node:onTouch(handler(self, self[event.method]))
            end
        end
    end
end

function _M:showWithScene(transition, time, more)
    self:setVisible(true)
    local scene = display.newScene(self.name_)
    scene:addChild(self)
    display.runScene(scene, transition, time, more)
    return self
end


--[[
    -- add by Joker 2018/05/17
    递归搜索UI子节点
    @param childName 要搜索的子节点名 
    可以 parentName.ChildName 方式传入 parentName为递归查找，ChildName..为直接获取 没有返回空
]]
function _M:seekResourceChild(childName)
    if self.resourceNode_ then
        local nameTable = string.split(childName, '.')
        local node = self.resourceNode_:seekChildNodeByName(nameTable[1])
            for i = 2, #nameTable do
                local name = nameTable[i]
                if node then
                    node = node:getChildByName(name)
                end
            end
		return node
    end
	return nil
end

return _M
