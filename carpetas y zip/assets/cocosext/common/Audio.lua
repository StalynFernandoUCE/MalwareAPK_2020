--[[--
 	AudioEngine
]]
local Audio = {}

local engine = ccexp.AudioEngine

--[[ 
    *Play 2d sound.
    * @param filePath The path of an audio file.
    * @param loop Whether audio instance loop or not.
    * @param volume Volume value (range from 0.0 to 1.0).
]]
function Audio.play(filePath, loop, volume)
    
    loop = loop or false
    volume = volume or 1
    local playerResult = -1
    if not IsAPPInBackground then
        print_Debug('AudioEngine Play not IsAPPInBackground ,filePath= '..filePath)
        playerResult = engine:play2d(filePath, loop, volume)
    end
    return playerResult
end

function Audio.setLoop(audioID, loop)
    engine:setLoop(audioID, loop)
end

function Audio.isLoop(audioID)
    return engine:isLoop(audioID)
end

function Audio.setVolume(audioID, volume)
    engine:setVolume(audioID, volume)
end

function Audio.getVolume(audioID)
    return engine:getVolume(audioID)
end

function Audio.pause(audioID)
    engine:pause(audioID)
end

function Audio.pauseAll()
    engine:pauseAll()
end

function Audio.resume(audioID)
    engine:resume(audioID)
end

function Audio.resumeAll()
    engine:resumeAll()
end

function Audio.resumeAllByAutoResumeFlag()
    if engine.resumeAllByAutoResumeFlag ~= nil then
        engine:resumeAllByAutoResumeFlag()
    else
        engine:resumeAll()
    end
end

function Audio.stop(audioID)
    engine:stop(audioID)
end

function Audio.stopAll()
    engine:stopAll()
end

function Audio.setAutoResumeFlag(audioID, flag)
    engine:setAutoResumeFlag(audioID, flag)
end

--[[
     * Sets the current playback position of an audio instance.
     *
     * @param audioID   An audioID returned by the play2d function.
     * @param sec       The offset in seconds from the start to seek to.
     * @return 
]]
function Audio.setCurrentTime(audioID, sec)
    return engine:setCurrentTime(audioID, sec)
end

--[[
    /** 
     * Gets the current playback position of an audio instance.
     *
     * @param audioID An audioID returned by the play2d function.
     * @return The current playback position of an audio instance.
     */

]]
function Audio.getCurrentTime(audioID)
    return engine:getCurrentTime(audioID)
end

--[[
    * Gets the duration of an audio instance.
    *
    * @param audioID An audioID returned by the play2d function.
    * @return The duration of an audio instance.
]]
function Audio.getDuration(audioID)
    return engine:getDuration(audioID)
end

function Audio.getState(audioID)
    return engine:getState(audioID)
end

--[[
     * Register a callback to be invoked when an audio instance has completed playing.
     *
     * @param audioID An audioID returned by the play2d function.
     * @param callback
]]
function Audio.setFinishCallback(audioID, callback)
    engine:setFinishCallback(audioID, callback)
end

function Audio.uncache(filePath)
    engine:uncache(filePath)
end

function Audio.uncacheAll()
    engine:uncacheAll()
end

function Audio.preload(filePath)
    engine:preload(filePath)
end

return Audio
