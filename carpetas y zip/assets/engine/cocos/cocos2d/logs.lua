
local _sformatFunc = string.format

local _print_c = print_c
local _print_debug_c = print_debug_c
local _print_major_c = print_major_c
local _print_error_c = print_error_c

local _kLogDebug = 0  
local _kLogInfo = 1  
local _kLogMajor = 2
local _kLogError = 3

local _logLevel = -1

local _logTab = {"[","","] ",""}



local function _log_concat(tag, fmt, ...)

    _logTab[2] = string.upper(tostring(tag))
    _logTab[4] = string.format(tostring(fmt), ...)
    return table.concat(_logTab)
end



function printLog(tag, fmt, ...)
    --[[
    local t = {
        "[",
        string.upper(tostring(tag)),
        "] ",
        string.format(tostring(fmt), ...)
    }
    ]]--


    print(_log_concat(tag, fmt, ...))
end

------------------- cocos之前的，不建议使用

function printError(fmt, ...)
    _print_error_c(_log_concat("ERR", fmt, ...))
    --print(debug.traceback("", 2))
end

function printInfo(fmt, ...)
    if type(DEBUG) ~= "number" or DEBUG < 2 then return end
    printLog("INFO", fmt, ...)
end
----------------------------------------




local function _refreshLogLevel()
    if _logLevel < _kLogDebug then
        _logLevel = cc.NativeBridge:getInstance():getMinLogLevel()
    end

end
--------------------可以使用这些----------

_refreshLogLevel()

if _logLevel>_kLogDebug then
    function print_Debug(...)
        -- do nothing
    end
    
    function printf_Debug(fmt,...)
        -- do nothing
    end
    
else
    function print_Debug(...)
        _print_debug_c(...)
    end
    
    function printf_Debug(fmt,...)
        _print_debug_c(string.format(tostring(fmt), ...))
    end
end

if _logLevel>_kLogInfo then 
    print = function(...)
        -- do nothing   
    end
    function printf(fmt, ...)
        -- do nothing
    end
else
    print = _print_c
    function printf(fmt, ...)
        _refreshLogLevel();
        if _logLevel>_kLogInfo then 
            return
        end
        _print_c(string.format(tostring(fmt), ...))
    end
end

print_Major = _print_major_c

function printf_Major(fmt,...)
    _print_major_c(string.format(tostring(fmt), ...))
end

print_Error =_print_error

function printf_Error(fmt,...)
    _print_error_c(string.format(tostring(fmt), ...))
end






-----------------------------------------

local function dump_value_(v)
    if type(v) == "string" then
        v = "\"" .. v .. "\""
    end
    return tostring(v)
end

function dumpToStrings(value, description, nesting)
    
    local lookupTable = {}
    local result = {}

    local traceback = string.split(debug.traceback("", 3), "\n")
    print("dump from: " .. string.trim(traceback[3]))

    local function _dumpToStrings_(value, description, indent, nest, keylen)
        description = description or "<var>"
        local spc = ""
        if type(keylen) == "number" then
            spc = string.rep(" ", keylen - string.len(dump_value_(description)))
        end
        if type(value) ~= "table" then
            result[#result +1 ] = string.format("%s%s%s = %s", indent, dump_value_(description), spc, dump_value_(value))
        elseif lookupTable[tostring(value)] then
            result[#result +1 ] = string.format("%s%s%s = *REF*", indent, dump_value_(description), spc)
        else
            lookupTable[tostring(value)] = true
            if nest > nesting then
                result[#result +1 ] = string.format("%s%s = *MAX NESTING*", indent, dump_value_(description))
            else
                result[#result +1 ] = string.format("%s%s = {", indent, dump_value_(description))
                local indent2 = indent.."    "
                local keys = {}
                local keylen = 0
                local values = {}
                for k, v in pairs(value) do
                    keys[#keys + 1] = k
                    local vk = dump_value_(k)
                    local vkl = string.len(vk)
                    if vkl > keylen then keylen = vkl end
                    values[k] = v
                end
                table.sort(keys, function(a, b)
                    if type(a) == "number" and type(b) == "number" then
                        return a < b
                    else
                        return tostring(a) < tostring(b)
                    end
                end)
                for i, k in ipairs(keys) do
                    _dumpToStrings_(values[k], k, indent2, nest + 1, keylen)
                end
                result[#result +1] = string.format("%s}", indent)
            end
        end
    end
    _dumpToStrings_(value, description, "- ", 1)

    return result
end

function dump(value, description, nesting)
    if type(nesting) ~= "number" then nesting = 6 end
    _refreshLogLevel();
    if _logLevel>_kLogDebug then 
        return
    end

    result = dumpToStrings(value, description, nesting)

    for i, line in ipairs(result) do
        _print_debug_c(line)
    end
end

